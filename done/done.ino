#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

const char* ssid = "Viet";
const char* password = "";

const char* serverAddress = "http://172.20.10.3:5000"; 

const int LED_PIN = 22; 

bool isLightOn = false;
unsigned long lastUpdateTime = 0;
const unsigned long updateInterval = 3000; 
unsigned long lastWifiCheckTime = 0;
const unsigned long wifiCheckInterval = 60000; 

void setupWiFi() {
  Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
  
  WiFi.mode(WIFI_STA);  
  delay(1000); 
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  int maxAttempts = 20;
  
  while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if(WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
    Serial.print("üì° ƒê·ªãa ch·ªâ IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi sau nhi·ªÅu l·∫ßn th·ª≠!");
  }
}


void setupGPIO() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  
  Serial.println("‚úÖ C·∫•u h√¨nh GPIO xong! LED n·ªëi v·ªõi GPIO: " + String(LED_PIN));
}

bool checkWiFiConnection() {
  if(WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WiFi. ƒêang k·∫øt n·ªëi l·∫°i...");
    setupWiFi();
    return WiFi.status() == WL_CONNECTED;
  }
  return true;
}

void checkLightStatus() {
  if(!checkWiFiConnection()) {
    Serial.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë√®n: WiFi ch∆∞a k·∫øt n·ªëi");
    return;
  }
  
  HTTPClient http;
  
  String url = String(serverAddress) + "/light/status";
  http.begin(url);
  
  int httpResponseCode = http.GET();
  Serial.print("üì° Light status response code: ");
  Serial.println(httpResponseCode);
  
  if(httpResponseCode == 200) {
    String response = http.getString();
    Serial.println("üîπ Ph·∫£n h·ªìi t·ª´ server: " + response);
    
    // Parse JSON response
    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, response);
    
    if(!error) {
      bool serverLightState = doc["light"];
      
      // ƒê·ªìng b·ªô tr·∫°ng th√°i ƒë√®n v·ªõi server
      if(serverLightState != isLightOn) {
        isLightOn = serverLightState;
        digitalWrite(LED_PIN, isLightOn ? HIGH : LOW);
        Serial.println(isLightOn ? "üí° ƒê√®n ƒë√£ B·∫¨T theo server" : "üí° ƒê√®n ƒë√£ T·∫ÆT theo server");
      } else {
        Serial.println("‚úÖ Tr·∫°ng th√°i ƒë√®n ƒë√£ ƒë·ªìng b·ªô v·ªõi server");
      }
    } else {
      Serial.print("‚ùå L·ªói khi parse JSON: ");
      Serial.println(error.c_str());
    }
  } else {
    Serial.print("‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i ƒë√®n: ");
    Serial.println(httpResponseCode);
  }
  
  http.end();
}

void pingServer() {
  if(!checkWiFiConnection()) {
    Serial.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ping server: WiFi ch∆∞a k·∫øt n·ªëi");
    return;
  }
  
  HTTPClient http;
  
  String url = String(serverAddress) + "/";
  http.begin(url);
  
  int httpResponseCode = http.GET();
  Serial.print("üì° Server ping response code: ");
  Serial.println(httpResponseCode);
  
  if(httpResponseCode > 0) {
    Serial.println("‚úÖ Server ƒëang ho·∫°t ƒë·ªông");
  } else {
    Serial.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server");
  }
  
  http.end();
}

void setup() {
  Serial.begin(115200);
  Serial.println("\n\n--- üöÄ Kh·ªüi ƒë·ªông h·ªá th·ªëng ---");
  
  setupGPIO();
  
  setupWiFi();
  
  pingServer();
  
  Serial.println("‚úÖ ESP32 ƒë√£ s·∫µn s√†ng k·∫øt n·ªëi v·ªõi server Flask");
}

void loop() {
  unsigned long currentTime = millis();
  
  if(currentTime - lastWifiCheckTime > wifiCheckInterval) {
    lastWifiCheckTime = currentTime;
    checkWiFiConnection();
  }
  
  if(currentTime - lastUpdateTime > updateInterval && WiFi.status() == WL_CONNECTED) {
    lastUpdateTime = currentTime;
    
    Serial.println("\n--- üîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i ---");
    
    pingServer();
    
    checkLightStatus();
  }
  
  delay(100);
}
